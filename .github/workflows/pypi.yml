---
name: Publish Python üêç distributions üì¶ to PyPI and TestPyPI
on: [push]
jobs:
  build:
    name: Build Python üêç distributions üì¶ to PyPI and TestPyPI
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-20.04, macos-latest, windows-2019]
        exclude: 
          - os: macos-latest
            python-version: '3.7'
    runs-on: ${{ matrix.os }}
    env:
      PKG_NAME: sequitur-g2p
      CIBW_SKIP: "cp36-macosx_arm64 cp37-macosx_arm64"
      CIBW_BUILD: "cp3*win* cp3*manylinux* cp3*mac*"
      CIBW_ARCHS_MACOS: "x86_64 universal2 arm64"
      CIBW_ARCHS_WINDOWS: "AMD64"
      CIBW_ARCHS_LINUX: "x86_64 aarch64"
      CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET="10.9" CC="clang++" CXX="clang++" CFLAGS="-std=c++11 -stdlib=libc++" CXXFLAGS="-stdlib=libc++" LDFLAGS="-stdlib=libc++"
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux2010
      CIBW_MANYLINUX_I686_IMAGE: manylinux2010
      TEST: true
    steps:
      - uses: actions/checkout@master
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # TODO: support non-x86_64 platforms
      - if: ${{ (matrix.os == 'ubuntu-20.04') && (matrix.python-version == '3.12') }}
        run: |
          wget -O - https://downloads.sourceforge.net/swig/swig-4.2.1.tar.gz | tar xzf - &&
          docker run --rm -e PLAT=manylinux2010_x86_64 -v `pwd`:/io quay.io/pypa/manylinux2010_x86_64 /io/travis/build-wheels.sh

      - if: ${{ matrix.os == 'windows-2019' }}
        run: |
          choco install swig
      - if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew update
          brew install swig

      # windows/mac builds
      - if: ${{ matrix.os != 'ubuntu-20.04' }}
        run: |
          pip install -r requirements.txt
          pip install -r dev-requirements.txt
          pip install .
          make travis-test

      - if: ${{ matrix.os != 'ubuntu-20.04' }}
        name: Build a binary wheel and a source tarball
        run: python -m build --sdist --wheel --outdir dist/ .

      - run: ls -alR dist/ || true
        shell: bash {0}
        ##  - name: Publish distribution üì¶ to Test PyPI
        ##    uses: pypa/gh-action-pypi-publish@master
        ##    with:
        ##       password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        ##       repository_url: https://test.pypi.org/legacy/

      - if: ${{ startsWith(github.ref, 'refs/tags') && matrix.os == 'ubuntu-20.04' && matrix.python-version == '3.12' }}
        uses: actions/upload-artifact@v4
        with:
          path: dist/*.tar.gz
      - if: ${{ startsWith(github.ref, 'refs/tags') && ((matrix.os != 'ubuntu-20.04') || (matrix.os == 'ubuntu-20.04' && matrix.python-version == '3.12')) }}
        uses: actions/upload-artifact@v4
        with:
          path: dist/*.whl

  publish:
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - run: mv dist/artifact/* dist/ || true
      - run: rm -rf dist/artifact || true
      - run: rm -rf dist/*-linux_x86_64* || true  # only want manylinux wheels
      - run: ls -alR . || true
      - if: startsWith(github.ref, 'refs/tags')
        name: Publish distribution üì¶ to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
           password: ${{ secrets.PYPI_API_TOKEN }}
